How did viewing a diff between two versions of a file help you see the bug that was introduced?
+ It found the differences between the two files faster than you would normally do
+ It allows you to focus on what is important, by showing ONLY the parts that changed

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
+ Helps finding bugs quickly
+ Allows you to rollback to a working version of the project
+ Helps keeping track of changes of things that work and things that do not

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
PROS (Manual over Automatic Commit)
+ Commits make more sense because you make them when it is logical to make them
+ Every commit has a purpose that can be understood
+ Reduces Clutter
+ Less space needed

CONS (Manual over Automatic Commit)
+ If you forget to commit you will lose the work done

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
+ Because in a code project, several files might have dependencies among them. This means that a change in one file might change
another file; hence, saving multiple files at once makes sense.

How can you use the commands git log and git diff to view the history of files?
+ git log lets you see all the commits that have been made through time
+ git diff lets you compare between two different commits

How might using version control make you more confident to make changes that could break something?
+ You have backups as long as you do commits and you can easily rollback by using git checkout [COMMIT ID]

Now that you have your workspace set up, what do you want to try using Git for?
+ Version control for my projects

